using System;
using System.Runtime.InteropServices;

class HelloWorld
{
    public delegate void ClickEventHandler(object sender, EventArgs e);
    public event ClickEventHandler PleaseClick;

    private const int WM_MOUSEMOVE = 0x0200;
    private const int WM_LBUTTONDOWN = 0x0201;
    private const int WM_SETCURSOR = 0x0020;
    private const int IDC_ARROW = 32512;

    [DllImport("user32.dll")]
    public static extern IntPtr SetCursor(IntPtr hCursor);
    [DllImport("user32.dll")]
    public static extern IntPtr LoadCursor(IntPtr hInstance, int lpCursorName);



    private const int WM_COMMAND = 0x0111;
    private const int BN_CLICKED = 245;

    [StructLayout(LayoutKind.Sequential)]
    public struct RECT
    {
        public int Left;
        public int Top;
        public int Right;
        public int Bottom;
    }

    [DllImport("user32.dll")]
    public static extern IntPtr CreateWindowEx(
      uint dwExStyle,
      string lpClassName,
      string lpWindowName,
      uint dwStyle,
      int x,
      int y,
      int nWidth,
      int nHeight,
      IntPtr hWndParent,
      IntPtr hMenu,
      IntPtr hInstance,
      IntPtr lpParam);

    [DllImport("user32.dll")]
    public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    [DllImport("user32.dll")]
    public static extern bool UpdateWindow(IntPtr hWnd);

    [DllImport("user32.dll")]
    public static extern bool GetClientRect(IntPtr hWnd, out RECT lpRect);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern IntPtr SendMessage(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);

    [DllImport("user32.dll")]
    public static extern int GetMessage(out MSG lpMsg, IntPtr hWnd, uint wMsgFilterMin, uint wMsgFilterMax);

    [DllImport("user32.dll")]
    public static extern bool TranslateMessage(ref MSG lpMsg);

    [DllImport("user32.dll")]
    public static extern IntPtr DispatchMessage(ref MSG lpMsg);

    public struct MSG
    {
        public IntPtr hwnd;
        public uint message;
        public IntPtr wParam;
        public IntPtr lParam;
        public uint time;
        public POINT pt;
    }

    public struct POINT
    {
        public int x;
        public int y;
    }

    private static uint HIWORD(IntPtr n)
    {
        return (uint)(n.ToInt32() >> 16 & 0xffff);
    }

    private static uint LOWORD(IntPtr n)
    {
        return (uint)(n.ToInt32() & 0xffff);
    }


    static void Main()
    {
        var app_ = new HelloWorld();

        var hWnd = CreateWindowEx(
          0,
          "static",
          "Hello, Windows!",
          0xCF0000,
          0,
          0,
          300,
          200,
          IntPtr.Zero,
          IntPtr.Zero,
          IntPtr.Zero,
          IntPtr.Zero);

        // Create a button
        var hWndButton = CreateWindowEx(
            0,
            "BUTTON",
            "Click me!",
            0x50010001,
            100,
            50,
            100,
            30,
            hWnd,
            IntPtr.Zero,
            IntPtr.Zero,
            IntPtr.Zero);

        // Create a "Please" button
        var hWndPleaseButton = CreateWindowEx(
            0,
            "BUTTON",
            "Please",
            0x50010001,
            110,
            100,
            80,
            30,
            hWnd,
            IntPtr.Zero,
            IntPtr.Zero,
            IntPtr.Zero);

        // register the button click event to the window
        SendMessage(hWndPleaseButton, (UInt32)0x000001, (IntPtr)0, (IntPtr)0);
        ShowWindow(hWndPleaseButton, 1);
        UpdateWindow(hWndPleaseButton);

        //PleaseClick += new ClickEventHandler(please_click);

        ShowWindow(hWnd, 1);
        UpdateWindow(hWnd);
        ShowWindow(hWndButton, 1);
        UpdateWindow(hWndButton);

        app_.PleaseClick += new ClickEventHandler(app_.please_click);

        RECT rect;
        GetClientRect(hWnd, out rect);
        Console.WriteLine("Client Rectangle: {0}, {1}, {2}, {3}", rect.Left, rect.Top, rect.Right, rect.Bottom);
        Console.ReadKey();

        MSG msg;
        while (GetMessage(out msg, IntPtr.Zero, 0, 0) != 0)
        {
            if (msg.message == (uint)WM_COMMAND && HIWORD(msg.wParam) == (uint)BN_CLICKED && (int)LOWORD(msg.wParam) == hWndPleaseButton.ToInt32())
            {
                app_.OnPleaseClick();
            }

            if (msg.message == WM_SETCURSOR && msg.hwnd == hWnd)
            {
                SetCursor(LoadCursor(IntPtr.Zero, IDC_ARROW));
                continue;
            }

            //if (msg.message == WM_MOUSEMOVE || msg.message == WM_LBUTTONDOWN)
            //{
            //    TranslateMessage(ref msg);
            //    DispatchMessage(ref msg);
            //}

            TranslateMessage(ref msg);
            DispatchMessage(ref msg);
        }

    }
    private void please_click(object sender, EventArgs e)
    {
        Console.WriteLine("Please button clicked");
    }

    protected virtual void OnPleaseClick()
    {
        if (PleaseClick != null)
        {
            PleaseClick(this, EventArgs.Empty);
        }
    }
}

